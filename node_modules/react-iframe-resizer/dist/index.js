'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var omit = _interopDefault(require('lodash.omit'));
var objectAssign = _interopDefault(require('object-assign'));
var iframeResizer = _interopDefault(require('iframe-resizer/js/iframeResizer'));

// eslint-disable-next-line no-unused-vars
var ResizerManagedIframe = (function (superclass) {
  function ResizerManagedIframe () {
    superclass.apply(this, arguments);
  }

  if ( superclass ) ResizerManagedIframe.__proto__ = superclass;
  ResizerManagedIframe.prototype = Object.create( superclass && superclass.prototype );
  ResizerManagedIframe.prototype.constructor = ResizerManagedIframe;

  ResizerManagedIframe.prototype.componentDidMount = function componentDidMount () {
    this.iframeResizer = iframeResizer(this.props.options, this.iframeElement);
  };

  ResizerManagedIframe.prototype.componentWillUnmount = function componentWillUnmount () {
    this.iframeResizer.close();
  };

  ResizerManagedIframe.prototype.render = function render () {
    var this$1 = this;

    return (
      React.createElement( 'iframe', objectAssign({},
        omit(this.props, ['children', 'options']), { ref: function (ref) {
          this$1.iframeElement = ref;
        } }), this.children)
    );
  };

  return ResizerManagedIframe;
}(React.Component));

ResizerManagedIframe.propTypes = {
  id: React.PropTypes.string.isRequired,
  children: React.PropTypes.node,
  src: React.PropTypes.string,
  options: React.PropTypes.object,
};

ResizerManagedIframe.defaultProps = {
  options: {},
};

module.exports = ResizerManagedIframe;