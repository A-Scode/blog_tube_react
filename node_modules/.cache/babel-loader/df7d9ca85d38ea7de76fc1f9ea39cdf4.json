{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nexports.replaceWithMultiple = replaceWithMultiple;\nexports.replaceWithSourceString = replaceWithSourceString;\nexports.replaceWith = replaceWith;\nexports._replaceWith = _replaceWith;\nexports.replaceExpressionWithStatements = replaceExpressionWithStatements;\nexports.replaceInline = replaceInline;\n\nvar _babelCodeFrame = require(\"babel-code-frame\");\n\nvar _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);\n\nvar _index = require(\"../index\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require(\"./index\");\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _babylon = require(\"babylon\");\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar hoistVariablesVisitor = {\n  Function: function Function(path) {\n    path.skip();\n  },\n  VariableDeclaration: function VariableDeclaration(path) {\n    if (path.node.kind !== \"var\") return;\n    var bindings = path.getBindingIdentifiers();\n\n    for (var key in bindings) {\n      path.scope.push({\n        id: bindings[key]\n      });\n    }\n\n    var exprs = [];\n\n    for (var _iterator = path.node.declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var declar = _ref;\n\n      if (declar.init) {\n        exprs.push(t.expressionStatement(t.assignmentExpression(\"=\", declar.id, declar.init)));\n      }\n    }\n\n    path.replaceWithMultiple(exprs);\n  }\n};\n\nfunction replaceWithMultiple(nodes) {\n  this.resync();\n  nodes = this._verifyNodeList(nodes);\n  t.inheritLeadingComments(nodes[0], this.node);\n  t.inheritTrailingComments(nodes[nodes.length - 1], this.node);\n  this.node = this.container[this.key] = null;\n  this.insertAfter(nodes);\n\n  if (this.node) {\n    this.requeue();\n  } else {\n    this.remove();\n  }\n}\n\nfunction replaceWithSourceString(replacement) {\n  this.resync();\n\n  try {\n    replacement = \"(\" + replacement + \")\";\n    replacement = (0, _babylon.parse)(replacement);\n  } catch (err) {\n    var loc = err.loc;\n\n    if (loc) {\n      err.message += \" - make sure this is an expression.\";\n      err.message += \"\\n\" + (0, _babelCodeFrame2.default)(replacement, loc.line, loc.column + 1);\n    }\n\n    throw err;\n  }\n\n  replacement = replacement.program.body[0].expression;\n\n  _index2.default.removeProperties(replacement);\n\n  return this.replaceWith(replacement);\n}\n\nfunction replaceWith(replacement) {\n  this.resync();\n\n  if (this.removed) {\n    throw new Error(\"You can't replace this node, we've already removed it\");\n  }\n\n  if (replacement instanceof _index4.default) {\n    replacement = replacement.node;\n  }\n\n  if (!replacement) {\n    throw new Error(\"You passed `path.replaceWith()` a falsy node, use `path.remove()` instead\");\n  }\n\n  if (this.node === replacement) {\n    return;\n  }\n\n  if (this.isProgram() && !t.isProgram(replacement)) {\n    throw new Error(\"You can only replace a Program root node with another Program node\");\n  }\n\n  if (Array.isArray(replacement)) {\n    throw new Error(\"Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`\");\n  }\n\n  if (typeof replacement === \"string\") {\n    throw new Error(\"Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`\");\n  }\n\n  if (this.isNodeType(\"Statement\") && t.isExpression(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement) && !this.parentPath.isExportDefaultDeclaration()) {\n      replacement = t.expressionStatement(replacement);\n    }\n  }\n\n  if (this.isNodeType(\"Expression\") && t.isStatement(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {\n      return this.replaceExpressionWithStatements([replacement]);\n    }\n  }\n\n  var oldNode = this.node;\n\n  if (oldNode) {\n    t.inheritsComments(replacement, oldNode);\n    t.removeComments(oldNode);\n  }\n\n  this._replaceWith(replacement);\n\n  this.type = replacement.type;\n  this.setScope();\n  this.requeue();\n}\n\nfunction _replaceWith(node) {\n  if (!this.container) {\n    throw new ReferenceError(\"Container is falsy\");\n  }\n\n  if (this.inList) {\n    t.validate(this.parent, this.key, [node]);\n  } else {\n    t.validate(this.parent, this.key, node);\n  }\n\n  this.debug(function () {\n    return \"Replace with \" + (node && node.type);\n  });\n  this.node = this.container[this.key] = node;\n}\n\nfunction replaceExpressionWithStatements(nodes) {\n  this.resync();\n  var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);\n\n  if (t.isSequenceExpression(toSequenceExpression)) {\n    var exprs = toSequenceExpression.expressions;\n\n    if (exprs.length >= 2 && this.parentPath.isExpressionStatement()) {\n      this._maybePopFromStatements(exprs);\n    }\n\n    if (exprs.length === 1) {\n      this.replaceWith(exprs[0]);\n    } else {\n      this.replaceWith(toSequenceExpression);\n    }\n  } else if (toSequenceExpression) {\n    this.replaceWith(toSequenceExpression);\n  } else {\n    var container = t.functionExpression(null, [], t.blockStatement(nodes));\n    container.shadow = true;\n    this.replaceWith(t.callExpression(container, []));\n    this.traverse(hoistVariablesVisitor);\n    var completionRecords = this.get(\"callee\").getCompletionRecords();\n\n    for (var _iterator2 = completionRecords, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var path = _ref2;\n      if (!path.isExpressionStatement()) continue;\n      var loop = path.findParent(function (path) {\n        return path.isLoop();\n      });\n\n      if (loop) {\n        var uid = loop.getData(\"expressionReplacementReturnUid\");\n\n        if (!uid) {\n          var callee = this.get(\"callee\");\n          uid = callee.scope.generateDeclaredUidIdentifier(\"ret\");\n          callee.get(\"body\").pushContainer(\"body\", t.returnStatement(uid));\n          loop.setData(\"expressionReplacementReturnUid\", uid);\n        } else {\n          uid = t.identifier(uid.name);\n        }\n\n        path.get(\"expression\").replaceWith(t.assignmentExpression(\"=\", uid, path.node.expression));\n      } else {\n        path.replaceWith(t.returnStatement(path.node.expression));\n      }\n    }\n\n    return this.node;\n  }\n}\n\nfunction replaceInline(nodes) {\n  this.resync();\n\n  if (Array.isArray(nodes)) {\n    if (Array.isArray(this.container)) {\n      nodes = this._verifyNodeList(nodes);\n\n      this._containerInsertAfter(nodes);\n\n      return this.remove();\n    } else {\n      return this.replaceWithMultiple(nodes);\n    }\n  } else {\n    return this.replaceWith(nodes);\n  }\n}","map":{"version":3,"sources":["D:/Python files/Start Django/blog_tube/frontend/blog_tube/node_modules/babel-traverse/lib/path/replacement.js"],"names":["exports","__esModule","_getIterator2","require","_getIterator3","_interopRequireDefault","replaceWithMultiple","replaceWithSourceString","replaceWith","_replaceWith","replaceExpressionWithStatements","replaceInline","_babelCodeFrame","_babelCodeFrame2","_index","_index2","_index3","_index4","_babylon","_babelTypes","t","_interopRequireWildcard","obj","newObj","key","Object","prototype","hasOwnProperty","call","default","hoistVariablesVisitor","Function","path","skip","VariableDeclaration","node","kind","bindings","getBindingIdentifiers","scope","push","id","exprs","_iterator","declarations","_isArray","Array","isArray","_i","_ref","length","next","done","value","declar","init","expressionStatement","assignmentExpression","nodes","resync","_verifyNodeList","inheritLeadingComments","inheritTrailingComments","container","insertAfter","requeue","remove","replacement","parse","err","loc","message","line","column","program","body","expression","removeProperties","removed","Error","isProgram","isNodeType","isExpression","canHaveVariableDeclarationOrExpression","canSwapBetweenExpressionAndStatement","parentPath","isExportDefaultDeclaration","isStatement","oldNode","inheritsComments","removeComments","type","setScope","ReferenceError","inList","validate","parent","debug","toSequenceExpression","isSequenceExpression","expressions","isExpressionStatement","_maybePopFromStatements","functionExpression","blockStatement","shadow","callExpression","traverse","completionRecords","get","getCompletionRecords","_iterator2","_isArray2","_i2","_ref2","loop","findParent","isLoop","uid","getData","callee","generateDeclaredUidIdentifier","pushContainer","returnStatement","setData","identifier","name","_containerInsertAfter"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nexports.replaceWithMultiple = replaceWithMultiple;\nexports.replaceWithSourceString = replaceWithSourceString;\nexports.replaceWith = replaceWith;\nexports._replaceWith = _replaceWith;\nexports.replaceExpressionWithStatements = replaceExpressionWithStatements;\nexports.replaceInline = replaceInline;\n\nvar _babelCodeFrame = require(\"babel-code-frame\");\n\nvar _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);\n\nvar _index = require(\"../index\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require(\"./index\");\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _babylon = require(\"babylon\");\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar hoistVariablesVisitor = {\n  Function: function Function(path) {\n    path.skip();\n  },\n  VariableDeclaration: function VariableDeclaration(path) {\n    if (path.node.kind !== \"var\") return;\n\n    var bindings = path.getBindingIdentifiers();\n    for (var key in bindings) {\n      path.scope.push({ id: bindings[key] });\n    }\n\n    var exprs = [];\n\n    for (var _iterator = path.node.declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var declar = _ref;\n\n      if (declar.init) {\n        exprs.push(t.expressionStatement(t.assignmentExpression(\"=\", declar.id, declar.init)));\n      }\n    }\n\n    path.replaceWithMultiple(exprs);\n  }\n};\n\nfunction replaceWithMultiple(nodes) {\n  this.resync();\n\n  nodes = this._verifyNodeList(nodes);\n  t.inheritLeadingComments(nodes[0], this.node);\n  t.inheritTrailingComments(nodes[nodes.length - 1], this.node);\n  this.node = this.container[this.key] = null;\n  this.insertAfter(nodes);\n\n  if (this.node) {\n    this.requeue();\n  } else {\n    this.remove();\n  }\n}\n\nfunction replaceWithSourceString(replacement) {\n  this.resync();\n\n  try {\n    replacement = \"(\" + replacement + \")\";\n    replacement = (0, _babylon.parse)(replacement);\n  } catch (err) {\n    var loc = err.loc;\n    if (loc) {\n      err.message += \" - make sure this is an expression.\";\n      err.message += \"\\n\" + (0, _babelCodeFrame2.default)(replacement, loc.line, loc.column + 1);\n    }\n    throw err;\n  }\n\n  replacement = replacement.program.body[0].expression;\n  _index2.default.removeProperties(replacement);\n  return this.replaceWith(replacement);\n}\n\nfunction replaceWith(replacement) {\n  this.resync();\n\n  if (this.removed) {\n    throw new Error(\"You can't replace this node, we've already removed it\");\n  }\n\n  if (replacement instanceof _index4.default) {\n    replacement = replacement.node;\n  }\n\n  if (!replacement) {\n    throw new Error(\"You passed `path.replaceWith()` a falsy node, use `path.remove()` instead\");\n  }\n\n  if (this.node === replacement) {\n    return;\n  }\n\n  if (this.isProgram() && !t.isProgram(replacement)) {\n    throw new Error(\"You can only replace a Program root node with another Program node\");\n  }\n\n  if (Array.isArray(replacement)) {\n    throw new Error(\"Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`\");\n  }\n\n  if (typeof replacement === \"string\") {\n    throw new Error(\"Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`\");\n  }\n\n  if (this.isNodeType(\"Statement\") && t.isExpression(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement) && !this.parentPath.isExportDefaultDeclaration()) {\n      replacement = t.expressionStatement(replacement);\n    }\n  }\n\n  if (this.isNodeType(\"Expression\") && t.isStatement(replacement)) {\n    if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {\n      return this.replaceExpressionWithStatements([replacement]);\n    }\n  }\n\n  var oldNode = this.node;\n  if (oldNode) {\n    t.inheritsComments(replacement, oldNode);\n    t.removeComments(oldNode);\n  }\n\n  this._replaceWith(replacement);\n  this.type = replacement.type;\n\n  this.setScope();\n\n  this.requeue();\n}\n\nfunction _replaceWith(node) {\n  if (!this.container) {\n    throw new ReferenceError(\"Container is falsy\");\n  }\n\n  if (this.inList) {\n    t.validate(this.parent, this.key, [node]);\n  } else {\n    t.validate(this.parent, this.key, node);\n  }\n\n  this.debug(function () {\n    return \"Replace with \" + (node && node.type);\n  });\n\n  this.node = this.container[this.key] = node;\n}\n\nfunction replaceExpressionWithStatements(nodes) {\n  this.resync();\n\n  var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);\n\n  if (t.isSequenceExpression(toSequenceExpression)) {\n    var exprs = toSequenceExpression.expressions;\n\n    if (exprs.length >= 2 && this.parentPath.isExpressionStatement()) {\n      this._maybePopFromStatements(exprs);\n    }\n\n    if (exprs.length === 1) {\n      this.replaceWith(exprs[0]);\n    } else {\n      this.replaceWith(toSequenceExpression);\n    }\n  } else if (toSequenceExpression) {\n    this.replaceWith(toSequenceExpression);\n  } else {\n    var container = t.functionExpression(null, [], t.blockStatement(nodes));\n    container.shadow = true;\n\n    this.replaceWith(t.callExpression(container, []));\n    this.traverse(hoistVariablesVisitor);\n\n    var completionRecords = this.get(\"callee\").getCompletionRecords();\n    for (var _iterator2 = completionRecords, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var path = _ref2;\n\n      if (!path.isExpressionStatement()) continue;\n\n      var loop = path.findParent(function (path) {\n        return path.isLoop();\n      });\n      if (loop) {\n        var uid = loop.getData(\"expressionReplacementReturnUid\");\n\n        if (!uid) {\n          var callee = this.get(\"callee\");\n          uid = callee.scope.generateDeclaredUidIdentifier(\"ret\");\n          callee.get(\"body\").pushContainer(\"body\", t.returnStatement(uid));\n          loop.setData(\"expressionReplacementReturnUid\", uid);\n        } else {\n          uid = t.identifier(uid.name);\n        }\n\n        path.get(\"expression\").replaceWith(t.assignmentExpression(\"=\", uid, path.node.expression));\n      } else {\n        path.replaceWith(t.returnStatement(path.node.expression));\n      }\n    }\n\n    return this.node;\n  }\n}\n\nfunction replaceInline(nodes) {\n  this.resync();\n\n  if (Array.isArray(nodes)) {\n    if (Array.isArray(this.container)) {\n      nodes = this._verifyNodeList(nodes);\n      this._containerInsertAfter(nodes);\n      return this.remove();\n    } else {\n      return this.replaceWithMultiple(nodes);\n    }\n  } else {\n    return this.replaceWith(nodes);\n  }\n}"]},"metadata":{},"sourceType":"script"}