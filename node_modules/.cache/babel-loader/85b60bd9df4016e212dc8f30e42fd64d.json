{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.ThrowStatement = exports.BreakStatement = exports.ReturnStatement = exports.ContinueStatement = exports.ForAwaitStatement = exports.ForOfStatement = exports.ForInStatement = undefined;\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nexports.WithStatement = WithStatement;\nexports.IfStatement = IfStatement;\nexports.ForStatement = ForStatement;\nexports.WhileStatement = WhileStatement;\nexports.DoWhileStatement = DoWhileStatement;\nexports.LabeledStatement = LabeledStatement;\nexports.TryStatement = TryStatement;\nexports.CatchClause = CatchClause;\nexports.SwitchStatement = SwitchStatement;\nexports.SwitchCase = SwitchCase;\nexports.DebuggerStatement = DebuggerStatement;\nexports.VariableDeclaration = VariableDeclaration;\nexports.VariableDeclarator = VariableDeclarator;\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction WithStatement(node) {\n  this.word(\"with\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.object, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction IfStatement(node) {\n  this.word(\"if\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.space();\n  var needsBlock = node.alternate && t.isIfStatement(getLastStatement(node.consequent));\n\n  if (needsBlock) {\n    this.token(\"{\");\n    this.newline();\n    this.indent();\n  }\n\n  this.printAndIndentOnComments(node.consequent, node);\n\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.token(\"}\");\n  }\n\n  if (node.alternate) {\n    if (this.endsWith(\"}\")) this.space();\n    this.word(\"else\");\n    this.space();\n    this.printAndIndentOnComments(node.alternate, node);\n  }\n}\n\nfunction getLastStatement(statement) {\n  if (!t.isStatement(statement.body)) return statement;\n  return getLastStatement(statement.body);\n}\n\nfunction ForStatement(node) {\n  this.word(\"for\");\n  this.space();\n  this.token(\"(\");\n  this.inForStatementInitCounter++;\n  this.print(node.init, node);\n  this.inForStatementInitCounter--;\n  this.token(\";\");\n\n  if (node.test) {\n    this.space();\n    this.print(node.test, node);\n  }\n\n  this.token(\";\");\n\n  if (node.update) {\n    this.space();\n    this.print(node.update, node);\n  }\n\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction WhileStatement(node) {\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nvar buildForXStatement = function buildForXStatement(op) {\n  return function (node) {\n    this.word(\"for\");\n    this.space();\n\n    if (op === \"await\") {\n      this.word(\"await\");\n      this.space();\n    }\n\n    this.token(\"(\");\n    this.print(node.left, node);\n    this.space();\n    this.word(op === \"await\" ? \"of\" : op);\n    this.space();\n    this.print(node.right, node);\n    this.token(\")\");\n    this.printBlock(node);\n  };\n};\n\nvar ForInStatement = exports.ForInStatement = buildForXStatement(\"in\");\nvar ForOfStatement = exports.ForOfStatement = buildForXStatement(\"of\");\nvar ForAwaitStatement = exports.ForAwaitStatement = buildForXStatement(\"await\");\n\nfunction DoWhileStatement(node) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n  this.space();\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.semicolon();\n}\n\nfunction buildLabelStatement(prefix) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"label\";\n  return function (node) {\n    this.word(prefix);\n    var label = node[key];\n\n    if (label) {\n      this.space();\n      var terminatorState = this.startTerminatorless();\n      this.print(label, node);\n      this.endTerminatorless(terminatorState);\n    }\n\n    this.semicolon();\n  };\n}\n\nvar ContinueStatement = exports.ContinueStatement = buildLabelStatement(\"continue\");\nvar ReturnStatement = exports.ReturnStatement = buildLabelStatement(\"return\", \"argument\");\nvar BreakStatement = exports.BreakStatement = buildLabelStatement(\"break\");\nvar ThrowStatement = exports.ThrowStatement = buildLabelStatement(\"throw\", \"argument\");\n\nfunction LabeledStatement(node) {\n  this.print(node.label, node);\n  this.token(\":\");\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction TryStatement(node) {\n  this.word(\"try\");\n  this.space();\n  this.print(node.block, node);\n  this.space();\n\n  if (node.handlers) {\n    this.print(node.handlers[0], node);\n  } else {\n    this.print(node.handler, node);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.word(\"finally\");\n    this.space();\n    this.print(node.finalizer, node);\n  }\n}\n\nfunction CatchClause(node) {\n  this.word(\"catch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.param, node);\n  this.token(\")\");\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction SwitchStatement(node) {\n  this.word(\"switch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.discriminant, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"{\");\n  this.printSequence(node.cases, node, {\n    indent: true,\n    addNewlines: function addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    }\n  });\n  this.token(\"}\");\n}\n\nfunction SwitchCase(node) {\n  if (node.test) {\n    this.word(\"case\");\n    this.space();\n    this.print(node.test, node);\n    this.token(\":\");\n  } else {\n    this.word(\"default\");\n    this.token(\":\");\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, node, {\n      indent: true\n    });\n  }\n}\n\nfunction DebuggerStatement() {\n  this.word(\"debugger\");\n  this.semicolon();\n}\n\nfunction variableDeclarationIdent() {\n  this.token(\",\");\n  this.newline();\n  if (this.endsWith(\"\\n\")) for (var i = 0; i < 4; i++) {\n    this.space(true);\n  }\n}\n\nfunction constDeclarationIdent() {\n  this.token(\",\");\n  this.newline();\n  if (this.endsWith(\"\\n\")) for (var i = 0; i < 6; i++) {\n    this.space(true);\n  }\n}\n\nfunction VariableDeclaration(node, parent) {\n  this.word(node.kind);\n  this.space();\n  var hasInits = false;\n\n  if (!t.isFor(parent)) {\n    for (var _iterator = node.declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var declar = _ref;\n\n      if (declar.init) {\n        hasInits = true;\n      }\n    }\n  }\n\n  var separator = void 0;\n\n  if (hasInits) {\n    separator = node.kind === \"const\" ? constDeclarationIdent : variableDeclarationIdent;\n  }\n\n  this.printList(node.declarations, node, {\n    separator: separator\n  });\n\n  if (t.isFor(parent)) {\n    if (parent.left === node || parent.init === node) return;\n  }\n\n  this.semicolon();\n}\n\nfunction VariableDeclarator(node) {\n  this.print(node.id, node);\n  this.print(node.id.typeAnnotation, node);\n\n  if (node.init) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.init, node);\n  }\n}","map":{"version":3,"sources":["D:/Python files/Start Django/blog_tube/frontend/blog_tube/node_modules/babel-generator/lib/generators/statements.js"],"names":["exports","__esModule","ThrowStatement","BreakStatement","ReturnStatement","ContinueStatement","ForAwaitStatement","ForOfStatement","ForInStatement","undefined","_getIterator2","require","_getIterator3","_interopRequireDefault","WithStatement","IfStatement","ForStatement","WhileStatement","DoWhileStatement","LabeledStatement","TryStatement","CatchClause","SwitchStatement","SwitchCase","DebuggerStatement","VariableDeclaration","VariableDeclarator","_babelTypes","t","_interopRequireWildcard","obj","newObj","key","Object","prototype","hasOwnProperty","call","default","node","word","space","token","print","object","printBlock","test","needsBlock","alternate","isIfStatement","getLastStatement","consequent","newline","indent","printAndIndentOnComments","dedent","endsWith","statement","isStatement","body","inForStatementInitCounter","init","update","buildForXStatement","op","left","right","semicolon","buildLabelStatement","prefix","arguments","length","label","terminatorState","startTerminatorless","endTerminatorless","block","handlers","handler","finalizer","param","discriminant","printSequence","cases","addNewlines","leading","cas","variableDeclarationIdent","i","constDeclarationIdent","parent","kind","hasInits","isFor","_iterator","declarations","_isArray","Array","isArray","_i","_ref","next","done","value","declar","separator","printList","id","typeAnnotation"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.ThrowStatement = exports.BreakStatement = exports.ReturnStatement = exports.ContinueStatement = exports.ForAwaitStatement = exports.ForOfStatement = exports.ForInStatement = undefined;\n\nvar _getIterator2 = require(\"babel-runtime/core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nexports.WithStatement = WithStatement;\nexports.IfStatement = IfStatement;\nexports.ForStatement = ForStatement;\nexports.WhileStatement = WhileStatement;\nexports.DoWhileStatement = DoWhileStatement;\nexports.LabeledStatement = LabeledStatement;\nexports.TryStatement = TryStatement;\nexports.CatchClause = CatchClause;\nexports.SwitchStatement = SwitchStatement;\nexports.SwitchCase = SwitchCase;\nexports.DebuggerStatement = DebuggerStatement;\nexports.VariableDeclaration = VariableDeclaration;\nexports.VariableDeclarator = VariableDeclarator;\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction WithStatement(node) {\n  this.word(\"with\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.object, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction IfStatement(node) {\n  this.word(\"if\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.space();\n\n  var needsBlock = node.alternate && t.isIfStatement(getLastStatement(node.consequent));\n  if (needsBlock) {\n    this.token(\"{\");\n    this.newline();\n    this.indent();\n  }\n\n  this.printAndIndentOnComments(node.consequent, node);\n\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.token(\"}\");\n  }\n\n  if (node.alternate) {\n    if (this.endsWith(\"}\")) this.space();\n    this.word(\"else\");\n    this.space();\n    this.printAndIndentOnComments(node.alternate, node);\n  }\n}\n\nfunction getLastStatement(statement) {\n  if (!t.isStatement(statement.body)) return statement;\n  return getLastStatement(statement.body);\n}\n\nfunction ForStatement(node) {\n  this.word(\"for\");\n  this.space();\n  this.token(\"(\");\n\n  this.inForStatementInitCounter++;\n  this.print(node.init, node);\n  this.inForStatementInitCounter--;\n  this.token(\";\");\n\n  if (node.test) {\n    this.space();\n    this.print(node.test, node);\n  }\n  this.token(\";\");\n\n  if (node.update) {\n    this.space();\n    this.print(node.update, node);\n  }\n\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction WhileStatement(node) {\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nvar buildForXStatement = function buildForXStatement(op) {\n  return function (node) {\n    this.word(\"for\");\n    this.space();\n    if (op === \"await\") {\n      this.word(\"await\");\n      this.space();\n    }\n    this.token(\"(\");\n\n    this.print(node.left, node);\n    this.space();\n    this.word(op === \"await\" ? \"of\" : op);\n    this.space();\n    this.print(node.right, node);\n    this.token(\")\");\n    this.printBlock(node);\n  };\n};\n\nvar ForInStatement = exports.ForInStatement = buildForXStatement(\"in\");\nvar ForOfStatement = exports.ForOfStatement = buildForXStatement(\"of\");\nvar ForAwaitStatement = exports.ForAwaitStatement = buildForXStatement(\"await\");\n\nfunction DoWhileStatement(node) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n  this.space();\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.semicolon();\n}\n\nfunction buildLabelStatement(prefix) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"label\";\n\n  return function (node) {\n    this.word(prefix);\n\n    var label = node[key];\n    if (label) {\n      this.space();\n\n      var terminatorState = this.startTerminatorless();\n      this.print(label, node);\n      this.endTerminatorless(terminatorState);\n    }\n\n    this.semicolon();\n  };\n}\n\nvar ContinueStatement = exports.ContinueStatement = buildLabelStatement(\"continue\");\nvar ReturnStatement = exports.ReturnStatement = buildLabelStatement(\"return\", \"argument\");\nvar BreakStatement = exports.BreakStatement = buildLabelStatement(\"break\");\nvar ThrowStatement = exports.ThrowStatement = buildLabelStatement(\"throw\", \"argument\");\n\nfunction LabeledStatement(node) {\n  this.print(node.label, node);\n  this.token(\":\");\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction TryStatement(node) {\n  this.word(\"try\");\n  this.space();\n  this.print(node.block, node);\n  this.space();\n\n  if (node.handlers) {\n    this.print(node.handlers[0], node);\n  } else {\n    this.print(node.handler, node);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.word(\"finally\");\n    this.space();\n    this.print(node.finalizer, node);\n  }\n}\n\nfunction CatchClause(node) {\n  this.word(\"catch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.param, node);\n  this.token(\")\");\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction SwitchStatement(node) {\n  this.word(\"switch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.discriminant, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"{\");\n\n  this.printSequence(node.cases, node, {\n    indent: true,\n    addNewlines: function addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    }\n  });\n\n  this.token(\"}\");\n}\n\nfunction SwitchCase(node) {\n  if (node.test) {\n    this.word(\"case\");\n    this.space();\n    this.print(node.test, node);\n    this.token(\":\");\n  } else {\n    this.word(\"default\");\n    this.token(\":\");\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, node, { indent: true });\n  }\n}\n\nfunction DebuggerStatement() {\n  this.word(\"debugger\");\n  this.semicolon();\n}\n\nfunction variableDeclarationIdent() {\n  this.token(\",\");\n  this.newline();\n  if (this.endsWith(\"\\n\")) for (var i = 0; i < 4; i++) {\n    this.space(true);\n  }\n}\n\nfunction constDeclarationIdent() {\n  this.token(\",\");\n  this.newline();\n  if (this.endsWith(\"\\n\")) for (var i = 0; i < 6; i++) {\n    this.space(true);\n  }\n}\n\nfunction VariableDeclaration(node, parent) {\n  this.word(node.kind);\n  this.space();\n\n  var hasInits = false;\n\n  if (!t.isFor(parent)) {\n    for (var _iterator = node.declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var declar = _ref;\n\n      if (declar.init) {\n        hasInits = true;\n      }\n    }\n  }\n\n  var separator = void 0;\n  if (hasInits) {\n    separator = node.kind === \"const\" ? constDeclarationIdent : variableDeclarationIdent;\n  }\n\n  this.printList(node.declarations, node, { separator: separator });\n\n  if (t.isFor(parent)) {\n    if (parent.left === node || parent.init === node) return;\n  }\n\n  this.semicolon();\n}\n\nfunction VariableDeclarator(node) {\n  this.print(node.id, node);\n  this.print(node.id.typeAnnotation, node);\n  if (node.init) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.init, node);\n  }\n}"]},"metadata":{},"sourceType":"script"}