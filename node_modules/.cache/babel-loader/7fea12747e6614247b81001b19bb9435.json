{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.createUnionTypeAnnotation = createUnionTypeAnnotation;\nexports.removeTypeDuplicates = removeTypeDuplicates;\nexports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;\n\nvar _index = require(\"./index\");\n\nvar t = _interopRequireWildcard(_index);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction createUnionTypeAnnotation(types) {\n  var flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0];\n  } else {\n    return t.unionTypeAnnotation(flattened);\n  }\n}\n\nfunction removeTypeDuplicates(nodes) {\n  var generics = {};\n  var bases = {};\n  var typeGroups = [];\n  var types = [];\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    if (!node) continue;\n\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    if (t.isAnyTypeAnnotation(node)) {\n      return [node];\n    }\n\n    if (t.isFlowBaseAnnotation(node)) {\n      bases[node.type] = node;\n      continue;\n    }\n\n    if (t.isUnionTypeAnnotation(node)) {\n      if (typeGroups.indexOf(node.types) < 0) {\n        nodes = nodes.concat(node.types);\n        typeGroups.push(node.types);\n      }\n\n      continue;\n    }\n\n    if (t.isGenericTypeAnnotation(node)) {\n      var name = node.id.name;\n\n      if (generics[name]) {\n        var existing = generics[name];\n\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics[name] = node;\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  for (var type in bases) {\n    types.push(bases[type]);\n  }\n\n  for (var _name in generics) {\n    types.push(generics[_name]);\n  }\n\n  return types;\n}\n\nfunction createTypeAnnotationBasedOnTypeof(type) {\n  if (type === \"string\") {\n    return t.stringTypeAnnotation();\n  } else if (type === \"number\") {\n    return t.numberTypeAnnotation();\n  } else if (type === \"undefined\") {\n    return t.voidTypeAnnotation();\n  } else if (type === \"boolean\") {\n    return t.booleanTypeAnnotation();\n  } else if (type === \"function\") {\n    return t.genericTypeAnnotation(t.identifier(\"Function\"));\n  } else if (type === \"object\") {\n    return t.genericTypeAnnotation(t.identifier(\"Object\"));\n  } else if (type === \"symbol\") {\n    return t.genericTypeAnnotation(t.identifier(\"Symbol\"));\n  } else {\n    throw new Error(\"Invalid typeof value\");\n  }\n}","map":{"version":3,"sources":["D:/Python files/Start Django/blog_tube/frontend/blog_tube/node_modules/babel-types/lib/flow.js"],"names":["exports","__esModule","createUnionTypeAnnotation","removeTypeDuplicates","createTypeAnnotationBasedOnTypeof","_index","require","t","_interopRequireWildcard","obj","newObj","key","Object","prototype","hasOwnProperty","call","default","types","flattened","length","unionTypeAnnotation","nodes","generics","bases","typeGroups","i","node","indexOf","isAnyTypeAnnotation","isFlowBaseAnnotation","type","isUnionTypeAnnotation","concat","push","isGenericTypeAnnotation","name","id","existing","typeParameters","params","_name","stringTypeAnnotation","numberTypeAnnotation","voidTypeAnnotation","booleanTypeAnnotation","genericTypeAnnotation","identifier","Error"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.createUnionTypeAnnotation = createUnionTypeAnnotation;\nexports.removeTypeDuplicates = removeTypeDuplicates;\nexports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;\n\nvar _index = require(\"./index\");\n\nvar t = _interopRequireWildcard(_index);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction createUnionTypeAnnotation(types) {\n  var flattened = removeTypeDuplicates(types);\n\n  if (flattened.length === 1) {\n    return flattened[0];\n  } else {\n    return t.unionTypeAnnotation(flattened);\n  }\n}\n\nfunction removeTypeDuplicates(nodes) {\n  var generics = {};\n  var bases = {};\n\n  var typeGroups = [];\n\n  var types = [];\n\n  for (var i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n    if (!node) continue;\n\n    if (types.indexOf(node) >= 0) {\n      continue;\n    }\n\n    if (t.isAnyTypeAnnotation(node)) {\n      return [node];\n    }\n\n    if (t.isFlowBaseAnnotation(node)) {\n      bases[node.type] = node;\n      continue;\n    }\n\n    if (t.isUnionTypeAnnotation(node)) {\n      if (typeGroups.indexOf(node.types) < 0) {\n        nodes = nodes.concat(node.types);\n        typeGroups.push(node.types);\n      }\n      continue;\n    }\n\n    if (t.isGenericTypeAnnotation(node)) {\n      var name = node.id.name;\n\n      if (generics[name]) {\n        var existing = generics[name];\n        if (existing.typeParameters) {\n          if (node.typeParameters) {\n            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));\n          }\n        } else {\n          existing = node.typeParameters;\n        }\n      } else {\n        generics[name] = node;\n      }\n\n      continue;\n    }\n\n    types.push(node);\n  }\n\n  for (var type in bases) {\n    types.push(bases[type]);\n  }\n\n  for (var _name in generics) {\n    types.push(generics[_name]);\n  }\n\n  return types;\n}\n\nfunction createTypeAnnotationBasedOnTypeof(type) {\n  if (type === \"string\") {\n    return t.stringTypeAnnotation();\n  } else if (type === \"number\") {\n    return t.numberTypeAnnotation();\n  } else if (type === \"undefined\") {\n    return t.voidTypeAnnotation();\n  } else if (type === \"boolean\") {\n    return t.booleanTypeAnnotation();\n  } else if (type === \"function\") {\n    return t.genericTypeAnnotation(t.identifier(\"Function\"));\n  } else if (type === \"object\") {\n    return t.genericTypeAnnotation(t.identifier(\"Object\"));\n  } else if (type === \"symbol\") {\n    return t.genericTypeAnnotation(t.identifier(\"Symbol\"));\n  } else {\n    throw new Error(\"Invalid typeof value\");\n  }\n}"]},"metadata":{},"sourceType":"script"}