{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar hooks = exports.hooks = [function (self, parent) {\n  var removeParent = self.key === \"test\" && (parent.isWhile() || parent.isSwitchCase()) || self.key === \"declaration\" && parent.isExportDeclaration() || self.key === \"body\" && parent.isLabeledStatement() || self.listKey === \"declarations\" && parent.isVariableDeclaration() && parent.node.declarations.length === 1 || self.key === \"expression\" && parent.isExpressionStatement();\n\n  if (removeParent) {\n    parent.remove();\n    return true;\n  }\n}, function (self, parent) {\n  if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {\n    parent.replaceWith(parent.node.expressions[0]);\n    return true;\n  }\n}, function (self, parent) {\n  if (parent.isBinary()) {\n    if (self.key === \"left\") {\n      parent.replaceWith(parent.node.right);\n    } else {\n      parent.replaceWith(parent.node.left);\n    }\n\n    return true;\n  }\n}, function (self, parent) {\n  if (parent.isIfStatement() && (self.key === \"consequent\" || self.key === \"alternate\") || self.key === \"body\" && (parent.isLoop() || parent.isArrowFunctionExpression())) {\n    self.replaceWith({\n      type: \"BlockStatement\",\n      body: []\n    });\n    return true;\n  }\n}];","map":{"version":3,"sources":["D:/Python files/Start Django/blog_tube/frontend/blog_tube/node_modules/babel-traverse/lib/path/lib/removal-hooks.js"],"names":["exports","__esModule","hooks","self","parent","removeParent","key","isWhile","isSwitchCase","isExportDeclaration","isLabeledStatement","listKey","isVariableDeclaration","node","declarations","length","isExpressionStatement","remove","isSequenceExpression","expressions","replaceWith","isBinary","right","left","isIfStatement","isLoop","isArrowFunctionExpression","type","body"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACA,IAAIC,KAAK,GAAGF,OAAO,CAACE,KAAR,GAAgB,CAAC,UAAUC,IAAV,EAAgBC,MAAhB,EAAwB;AACnD,MAAIC,YAAY,GAAGF,IAAI,CAACG,GAAL,KAAa,MAAb,KAAwBF,MAAM,CAACG,OAAP,MAAoBH,MAAM,CAACI,YAAP,EAA5C,KAAsEL,IAAI,CAACG,GAAL,KAAa,aAAb,IAA8BF,MAAM,CAACK,mBAAP,EAApG,IAAoIN,IAAI,CAACG,GAAL,KAAa,MAAb,IAAuBF,MAAM,CAACM,kBAAP,EAA3J,IAA0LP,IAAI,CAACQ,OAAL,KAAiB,cAAjB,IAAmCP,MAAM,CAACQ,qBAAP,EAAnC,IAAqER,MAAM,CAACS,IAAP,CAAYC,YAAZ,CAAyBC,MAAzB,KAAoC,CAAnS,IAAwSZ,IAAI,CAACG,GAAL,KAAa,YAAb,IAA6BF,MAAM,CAACY,qBAAP,EAAxV;;AAEA,MAAIX,YAAJ,EAAkB;AAChBD,IAAAA,MAAM,CAACa,MAAP;AACA,WAAO,IAAP;AACD;AACF,CAP2B,EAOzB,UAAUd,IAAV,EAAgBC,MAAhB,EAAwB;AACzB,MAAIA,MAAM,CAACc,oBAAP,MAAiCd,MAAM,CAACS,IAAP,CAAYM,WAAZ,CAAwBJ,MAAxB,KAAmC,CAAxE,EAA2E;AACzEX,IAAAA,MAAM,CAACgB,WAAP,CAAmBhB,MAAM,CAACS,IAAP,CAAYM,WAAZ,CAAwB,CAAxB,CAAnB;AACA,WAAO,IAAP;AACD;AACF,CAZ2B,EAYzB,UAAUhB,IAAV,EAAgBC,MAAhB,EAAwB;AACzB,MAAIA,MAAM,CAACiB,QAAP,EAAJ,EAAuB;AACrB,QAAIlB,IAAI,CAACG,GAAL,KAAa,MAAjB,EAAyB;AACvBF,MAAAA,MAAM,CAACgB,WAAP,CAAmBhB,MAAM,CAACS,IAAP,CAAYS,KAA/B;AACD,KAFD,MAEO;AACLlB,MAAAA,MAAM,CAACgB,WAAP,CAAmBhB,MAAM,CAACS,IAAP,CAAYU,IAA/B;AACD;;AACD,WAAO,IAAP;AACD;AACF,CArB2B,EAqBzB,UAAUpB,IAAV,EAAgBC,MAAhB,EAAwB;AACzB,MAAIA,MAAM,CAACoB,aAAP,OAA2BrB,IAAI,CAACG,GAAL,KAAa,YAAb,IAA6BH,IAAI,CAACG,GAAL,KAAa,WAArE,KAAqFH,IAAI,CAACG,GAAL,KAAa,MAAb,KAAwBF,MAAM,CAACqB,MAAP,MAAmBrB,MAAM,CAACsB,yBAAP,EAA3C,CAAzF,EAAyK;AACvKvB,IAAAA,IAAI,CAACiB,WAAL,CAAiB;AACfO,MAAAA,IAAI,EAAE,gBADS;AAEfC,MAAAA,IAAI,EAAE;AAFS,KAAjB;AAIA,WAAO,IAAP;AACD;AACF,CA7B2B,CAA5B","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nvar hooks = exports.hooks = [function (self, parent) {\n  var removeParent = self.key === \"test\" && (parent.isWhile() || parent.isSwitchCase()) || self.key === \"declaration\" && parent.isExportDeclaration() || self.key === \"body\" && parent.isLabeledStatement() || self.listKey === \"declarations\" && parent.isVariableDeclaration() && parent.node.declarations.length === 1 || self.key === \"expression\" && parent.isExpressionStatement();\n\n  if (removeParent) {\n    parent.remove();\n    return true;\n  }\n}, function (self, parent) {\n  if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {\n    parent.replaceWith(parent.node.expressions[0]);\n    return true;\n  }\n}, function (self, parent) {\n  if (parent.isBinary()) {\n    if (self.key === \"left\") {\n      parent.replaceWith(parent.node.right);\n    } else {\n      parent.replaceWith(parent.node.left);\n    }\n    return true;\n  }\n}, function (self, parent) {\n  if (parent.isIfStatement() && (self.key === \"consequent\" || self.key === \"alternate\") || self.key === \"body\" && (parent.isLoop() || parent.isArrowFunctionExpression())) {\n    self.replaceWith({\n      type: \"BlockStatement\",\n      body: []\n    });\n    return true;\n  }\n}];"]},"metadata":{},"sourceType":"script"}