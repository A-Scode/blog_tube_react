{"ast":null,"code":"\"use strict\";\n\nvar _index = require(\"../index\");\n\nvar t = _interopRequireWildcard(_index);\n\nvar _constants = require(\"../constants\");\n\nvar _index2 = require(\"./index\");\n\nvar _index3 = _interopRequireDefault(_index2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\n(0, _index3.default)(\"ArrayExpression\", {\n  fields: {\n    elements: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeOrValueType)(\"null\", \"Expression\", \"SpreadElement\"))),\n      default: []\n    }\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"]\n});\n(0, _index3.default)(\"AssignmentExpression\", {\n  fields: {\n    operator: {\n      validate: (0, _index2.assertValueType)(\"string\")\n    },\n    left: {\n      validate: (0, _index2.assertNodeType)(\"LVal\")\n    },\n    right: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  },\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Expression\"]\n});\n(0, _index3.default)(\"BinaryExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  fields: {\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.BINARY_OPERATORS)\n    },\n    left: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    right: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  },\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"]\n});\n(0, _index3.default)(\"Directive\", {\n  visitor: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _index2.assertNodeType)(\"DirectiveLiteral\")\n    }\n  }\n});\n(0, _index3.default)(\"DirectiveLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _index2.assertValueType)(\"string\")\n    }\n  }\n});\n(0, _index3.default)(\"BlockStatement\", {\n  builder: [\"body\", \"directives\"],\n  visitor: [\"directives\", \"body\"],\n  fields: {\n    directives: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Directive\"))),\n      default: []\n    },\n    body: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Statement\")))\n    }\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"Statement\"]\n});\n(0, _index3.default)(\"BreakStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\"),\n      optional: true\n    }\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"]\n});\n(0, _index3.default)(\"CallExpression\", {\n  visitor: [\"callee\", \"arguments\"],\n  fields: {\n    callee: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    arguments: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Expression\", \"SpreadElement\")))\n    }\n  },\n  aliases: [\"Expression\"]\n});\n(0, _index3.default)(\"CatchClause\", {\n  visitor: [\"param\", \"body\"],\n  fields: {\n    param: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    }\n  },\n  aliases: [\"Scopable\"]\n});\n(0, _index3.default)(\"ConditionalExpression\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  fields: {\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    consequent: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    alternate: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Expression\", \"Conditional\"]\n});\n(0, _index3.default)(\"ContinueStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\"),\n      optional: true\n    }\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"]\n});\n(0, _index3.default)(\"DebuggerStatement\", {\n  aliases: [\"Statement\"]\n});\n(0, _index3.default)(\"DoWhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  fields: {\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    }\n  },\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"]\n});\n(0, _index3.default)(\"EmptyStatement\", {\n  aliases: [\"Statement\"]\n});\n(0, _index3.default)(\"ExpressionStatement\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Statement\", \"ExpressionWrapper\"]\n});\n(0, _index3.default)(\"File\", {\n  builder: [\"program\", \"comments\", \"tokens\"],\n  visitor: [\"program\"],\n  fields: {\n    program: {\n      validate: (0, _index2.assertNodeType)(\"Program\")\n    }\n  }\n});\n(0, _index3.default)(\"ForInStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\", \"ForXStatement\"],\n  fields: {\n    left: {\n      validate: (0, _index2.assertNodeType)(\"VariableDeclaration\", \"LVal\")\n    },\n    right: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    }\n  }\n});\n(0, _index3.default)(\"ForStatement\", {\n  visitor: [\"init\", \"test\", \"update\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\"],\n  fields: {\n    init: {\n      validate: (0, _index2.assertNodeType)(\"VariableDeclaration\", \"Expression\"),\n      optional: true\n    },\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    update: {\n      validate: (0, _index2.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    }\n  }\n});\n(0, _index3.default)(\"FunctionDeclaration\", {\n  builder: [\"id\", \"params\", \"body\", \"generator\", \"async\"],\n  visitor: [\"id\", \"params\", \"body\", \"returnType\", \"typeParameters\"],\n  fields: {\n    id: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\")\n    },\n    params: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"LVal\")))\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    },\n    generator: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    },\n    async: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    }\n  },\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Statement\", \"Pureish\", \"Declaration\"]\n});\n(0, _index3.default)(\"FunctionExpression\", {\n  inherits: \"FunctionDeclaration\",\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Expression\", \"Pureish\"],\n  fields: {\n    id: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\"),\n      optional: true\n    },\n    params: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"LVal\")))\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    },\n    generator: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    },\n    async: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    }\n  }\n});\n(0, _index3.default)(\"Identifier\", {\n  builder: [\"name\"],\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    name: {\n      validate: function validate(node, key, val) {\n        if (!t.isValidIdentifier(val)) {}\n      }\n    },\n    decorators: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Decorator\")))\n    }\n  }\n});\n(0, _index3.default)(\"IfStatement\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  aliases: [\"Statement\", \"Conditional\"],\n  fields: {\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    consequent: {\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    },\n    alternate: {\n      optional: true,\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    }\n  }\n});\n(0, _index3.default)(\"LabeledStatement\", {\n  visitor: [\"label\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    label: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    }\n  }\n});\n(0, _index3.default)(\"StringLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _index2.assertValueType)(\"string\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n(0, _index3.default)(\"NumericLiteral\", {\n  builder: [\"value\"],\n  deprecatedAlias: \"NumberLiteral\",\n  fields: {\n    value: {\n      validate: (0, _index2.assertValueType)(\"number\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n(0, _index3.default)(\"NullLiteral\", {\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n(0, _index3.default)(\"BooleanLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n(0, _index3.default)(\"RegExpLiteral\", {\n  builder: [\"pattern\", \"flags\"],\n  deprecatedAlias: \"RegexLiteral\",\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    pattern: {\n      validate: (0, _index2.assertValueType)(\"string\")\n    },\n    flags: {\n      validate: (0, _index2.assertValueType)(\"string\"),\n      default: \"\"\n    }\n  }\n});\n(0, _index3.default)(\"LogicalExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n  fields: {\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.LOGICAL_OPERATORS)\n    },\n    left: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    right: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _index3.default)(\"MemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    object: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    property: {\n      validate: function validate(node, key, val) {\n        var expectedType = node.computed ? \"Expression\" : \"Identifier\";\n        (0, _index2.assertNodeType)(expectedType)(node, key, val);\n      }\n    },\n    computed: {\n      default: false\n    }\n  }\n});\n(0, _index3.default)(\"NewExpression\", {\n  visitor: [\"callee\", \"arguments\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    arguments: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Expression\", \"SpreadElement\")))\n    }\n  }\n});\n(0, _index3.default)(\"Program\", {\n  visitor: [\"directives\", \"body\"],\n  builder: [\"body\", \"directives\"],\n  fields: {\n    directives: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Directive\"))),\n      default: []\n    },\n    body: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Statement\")))\n    }\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"FunctionParent\"]\n});\n(0, _index3.default)(\"ObjectExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"ObjectMethod\", \"ObjectProperty\", \"SpreadProperty\")))\n    }\n  }\n});\n(0, _index3.default)(\"ObjectMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\"],\n  fields: {\n    kind: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"string\"), (0, _index2.assertOneOf)(\"method\", \"get\", \"set\")),\n      default: \"method\"\n    },\n    computed: {\n      validate: (0, _index2.assertValueType)(\"boolean\"),\n      default: false\n    },\n    key: {\n      validate: function validate(node, key, val) {\n        var expectedTypes = node.computed ? [\"Expression\"] : [\"Identifier\", \"StringLiteral\", \"NumericLiteral\"];\n\n        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);\n      }\n    },\n    decorators: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Decorator\")))\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    },\n    generator: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    },\n    async: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    }\n  },\n  visitor: [\"key\", \"params\", \"body\", \"decorators\", \"returnType\", \"typeParameters\"],\n  aliases: [\"UserWhitespacable\", \"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\", \"ObjectMember\"]\n});\n(0, _index3.default)(\"ObjectProperty\", {\n  builder: [\"key\", \"value\", \"computed\", \"shorthand\", \"decorators\"],\n  fields: {\n    computed: {\n      validate: (0, _index2.assertValueType)(\"boolean\"),\n      default: false\n    },\n    key: {\n      validate: function validate(node, key, val) {\n        var expectedTypes = node.computed ? [\"Expression\"] : [\"Identifier\", \"StringLiteral\", \"NumericLiteral\"];\n\n        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);\n      }\n    },\n    value: {\n      validate: (0, _index2.assertNodeType)(\"Expression\", \"Pattern\", \"RestElement\")\n    },\n    shorthand: {\n      validate: (0, _index2.assertValueType)(\"boolean\"),\n      default: false\n    },\n    decorators: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Decorator\"))),\n      optional: true\n    }\n  },\n  visitor: [\"key\", \"value\", \"decorators\"],\n  aliases: [\"UserWhitespacable\", \"Property\", \"ObjectMember\"]\n});\n(0, _index3.default)(\"RestElement\", {\n  visitor: [\"argument\", \"typeAnnotation\"],\n  aliases: [\"LVal\"],\n  fields: {\n    argument: {\n      validate: (0, _index2.assertNodeType)(\"LVal\")\n    },\n    decorators: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Decorator\")))\n    }\n  }\n});\n(0, _index3.default)(\"ReturnStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: (0, _index2.assertNodeType)(\"Expression\"),\n      optional: true\n    }\n  }\n});\n(0, _index3.default)(\"SequenceExpression\", {\n  visitor: [\"expressions\"],\n  fields: {\n    expressions: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Expression\")))\n    }\n  },\n  aliases: [\"Expression\"]\n});\n(0, _index3.default)(\"SwitchCase\", {\n  visitor: [\"test\", \"consequent\"],\n  fields: {\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    consequent: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Statement\")))\n    }\n  }\n});\n(0, _index3.default)(\"SwitchStatement\", {\n  visitor: [\"discriminant\", \"cases\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Scopable\"],\n  fields: {\n    discriminant: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    cases: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"SwitchCase\")))\n    }\n  }\n});\n(0, _index3.default)(\"ThisExpression\", {\n  aliases: [\"Expression\"]\n});\n(0, _index3.default)(\"ThrowStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _index3.default)(\"TryStatement\", {\n  visitor: [\"block\", \"handler\", \"finalizer\"],\n  aliases: [\"Statement\"],\n  fields: {\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    },\n    handler: {\n      optional: true,\n      handler: (0, _index2.assertNodeType)(\"BlockStatement\")\n    },\n    finalizer: {\n      optional: true,\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    }\n  }\n});\n(0, _index3.default)(\"UnaryExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: true\n    },\n    argument: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.UNARY_OPERATORS)\n    }\n  },\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\", \"Expression\"]\n});\n(0, _index3.default)(\"UpdateExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: false\n    },\n    argument: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.UPDATE_OPERATORS)\n    }\n  },\n  visitor: [\"argument\"],\n  aliases: [\"Expression\"]\n});\n(0, _index3.default)(\"VariableDeclaration\", {\n  builder: [\"kind\", \"declarations\"],\n  visitor: [\"declarations\"],\n  aliases: [\"Statement\", \"Declaration\"],\n  fields: {\n    kind: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"string\"), (0, _index2.assertOneOf)(\"var\", \"let\", \"const\"))\n    },\n    declarations: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"VariableDeclarator\")))\n    }\n  }\n});\n(0, _index3.default)(\"VariableDeclarator\", {\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: {\n      validate: (0, _index2.assertNodeType)(\"LVal\")\n    },\n    init: {\n      optional: true,\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _index3.default)(\"WhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n  fields: {\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\", \"Statement\")\n    }\n  }\n});\n(0, _index3.default)(\"WithStatement\", {\n  visitor: [\"object\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    object: {\n      object: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\", \"Statement\")\n    }\n  }\n});","map":{"version":3,"sources":["D:/Python files/Start Django/blog_tube/frontend/blog_tube/node_modules/babel-types/lib/definitions/core.js"],"names":["_index","require","t","_interopRequireWildcard","_constants","_index2","_index3","_interopRequireDefault","obj","__esModule","default","newObj","key","Object","prototype","hasOwnProperty","call","fields","elements","validate","chain","assertValueType","assertEach","assertNodeOrValueType","visitor","aliases","operator","left","assertNodeType","right","builder","assertOneOf","apply","undefined","BINARY_OPERATORS","value","directives","body","label","optional","callee","arguments","param","test","consequent","alternate","expression","program","init","update","id","params","generator","async","inherits","name","node","val","isValidIdentifier","decorators","deprecatedAlias","pattern","flags","LOGICAL_OPERATORS","object","property","expectedType","computed","properties","kind","expectedTypes","shorthand","argument","expressions","discriminant","cases","handler","finalizer","prefix","UNARY_OPERATORS","UPDATE_OPERATORS","declarations"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _index = require(\"../index\");\n\nvar t = _interopRequireWildcard(_index);\n\nvar _constants = require(\"../constants\");\n\nvar _index2 = require(\"./index\");\n\nvar _index3 = _interopRequireDefault(_index2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n(0, _index3.default)(\"ArrayExpression\", {\n  fields: {\n    elements: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeOrValueType)(\"null\", \"Expression\", \"SpreadElement\"))),\n      default: []\n    }\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"]\n});\n\n(0, _index3.default)(\"AssignmentExpression\", {\n  fields: {\n    operator: {\n      validate: (0, _index2.assertValueType)(\"string\")\n    },\n    left: {\n      validate: (0, _index2.assertNodeType)(\"LVal\")\n    },\n    right: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  },\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Expression\"]\n});\n\n(0, _index3.default)(\"BinaryExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  fields: {\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.BINARY_OPERATORS)\n    },\n    left: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    right: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  },\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"]\n});\n\n(0, _index3.default)(\"Directive\", {\n  visitor: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _index2.assertNodeType)(\"DirectiveLiteral\")\n    }\n  }\n});\n\n(0, _index3.default)(\"DirectiveLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _index2.assertValueType)(\"string\")\n    }\n  }\n});\n\n(0, _index3.default)(\"BlockStatement\", {\n  builder: [\"body\", \"directives\"],\n  visitor: [\"directives\", \"body\"],\n  fields: {\n    directives: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Directive\"))),\n      default: []\n    },\n    body: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Statement\")))\n    }\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"Statement\"]\n});\n\n(0, _index3.default)(\"BreakStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\"),\n      optional: true\n    }\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"]\n});\n\n(0, _index3.default)(\"CallExpression\", {\n  visitor: [\"callee\", \"arguments\"],\n  fields: {\n    callee: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    arguments: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Expression\", \"SpreadElement\")))\n    }\n  },\n  aliases: [\"Expression\"]\n});\n\n(0, _index3.default)(\"CatchClause\", {\n  visitor: [\"param\", \"body\"],\n  fields: {\n    param: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    }\n  },\n  aliases: [\"Scopable\"]\n});\n\n(0, _index3.default)(\"ConditionalExpression\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  fields: {\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    consequent: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    alternate: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Expression\", \"Conditional\"]\n});\n\n(0, _index3.default)(\"ContinueStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\"),\n      optional: true\n    }\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"]\n});\n\n(0, _index3.default)(\"DebuggerStatement\", {\n  aliases: [\"Statement\"]\n});\n\n(0, _index3.default)(\"DoWhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  fields: {\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    }\n  },\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"]\n});\n\n(0, _index3.default)(\"EmptyStatement\", {\n  aliases: [\"Statement\"]\n});\n\n(0, _index3.default)(\"ExpressionStatement\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Statement\", \"ExpressionWrapper\"]\n});\n\n(0, _index3.default)(\"File\", {\n  builder: [\"program\", \"comments\", \"tokens\"],\n  visitor: [\"program\"],\n  fields: {\n    program: {\n      validate: (0, _index2.assertNodeType)(\"Program\")\n    }\n  }\n});\n\n(0, _index3.default)(\"ForInStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\", \"ForXStatement\"],\n  fields: {\n    left: {\n      validate: (0, _index2.assertNodeType)(\"VariableDeclaration\", \"LVal\")\n    },\n    right: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    }\n  }\n});\n\n(0, _index3.default)(\"ForStatement\", {\n  visitor: [\"init\", \"test\", \"update\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\"],\n  fields: {\n    init: {\n      validate: (0, _index2.assertNodeType)(\"VariableDeclaration\", \"Expression\"),\n      optional: true\n    },\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    update: {\n      validate: (0, _index2.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    }\n  }\n});\n\n(0, _index3.default)(\"FunctionDeclaration\", {\n  builder: [\"id\", \"params\", \"body\", \"generator\", \"async\"],\n  visitor: [\"id\", \"params\", \"body\", \"returnType\", \"typeParameters\"],\n  fields: {\n    id: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\")\n    },\n    params: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"LVal\")))\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    },\n    generator: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    },\n    async: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    }\n  },\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Statement\", \"Pureish\", \"Declaration\"]\n});\n\n(0, _index3.default)(\"FunctionExpression\", {\n  inherits: \"FunctionDeclaration\",\n  aliases: [\"Scopable\", \"Function\", \"BlockParent\", \"FunctionParent\", \"Expression\", \"Pureish\"],\n  fields: {\n    id: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\"),\n      optional: true\n    },\n    params: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"LVal\")))\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    },\n    generator: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    },\n    async: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    }\n  }\n});\n\n(0, _index3.default)(\"Identifier\", {\n  builder: [\"name\"],\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    name: {\n      validate: function validate(node, key, val) {\n        if (!t.isValidIdentifier(val)) {}\n      }\n    },\n    decorators: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Decorator\")))\n    }\n  }\n});\n\n(0, _index3.default)(\"IfStatement\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  aliases: [\"Statement\", \"Conditional\"],\n  fields: {\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    consequent: {\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    },\n    alternate: {\n      optional: true,\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    }\n  }\n});\n\n(0, _index3.default)(\"LabeledStatement\", {\n  visitor: [\"label\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    label: {\n      validate: (0, _index2.assertNodeType)(\"Identifier\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"Statement\")\n    }\n  }\n});\n\n(0, _index3.default)(\"StringLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _index2.assertValueType)(\"string\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n\n(0, _index3.default)(\"NumericLiteral\", {\n  builder: [\"value\"],\n  deprecatedAlias: \"NumberLiteral\",\n  fields: {\n    value: {\n      validate: (0, _index2.assertValueType)(\"number\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n\n(0, _index3.default)(\"NullLiteral\", {\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n\n(0, _index3.default)(\"BooleanLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n\n(0, _index3.default)(\"RegExpLiteral\", {\n  builder: [\"pattern\", \"flags\"],\n  deprecatedAlias: \"RegexLiteral\",\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    pattern: {\n      validate: (0, _index2.assertValueType)(\"string\")\n    },\n    flags: {\n      validate: (0, _index2.assertValueType)(\"string\"),\n      default: \"\"\n    }\n  }\n});\n\n(0, _index3.default)(\"LogicalExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n  fields: {\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.LOGICAL_OPERATORS)\n    },\n    left: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    right: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  }\n});\n\n(0, _index3.default)(\"MemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    object: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    property: {\n      validate: function validate(node, key, val) {\n        var expectedType = node.computed ? \"Expression\" : \"Identifier\";\n        (0, _index2.assertNodeType)(expectedType)(node, key, val);\n      }\n    },\n    computed: {\n      default: false\n    }\n  }\n});\n\n(0, _index3.default)(\"NewExpression\", {\n  visitor: [\"callee\", \"arguments\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    arguments: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Expression\", \"SpreadElement\")))\n    }\n  }\n});\n\n(0, _index3.default)(\"Program\", {\n  visitor: [\"directives\", \"body\"],\n  builder: [\"body\", \"directives\"],\n  fields: {\n    directives: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Directive\"))),\n      default: []\n    },\n    body: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Statement\")))\n    }\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"FunctionParent\"]\n});\n\n(0, _index3.default)(\"ObjectExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"ObjectMethod\", \"ObjectProperty\", \"SpreadProperty\")))\n    }\n  }\n});\n\n(0, _index3.default)(\"ObjectMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\"],\n  fields: {\n    kind: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"string\"), (0, _index2.assertOneOf)(\"method\", \"get\", \"set\")),\n      default: \"method\"\n    },\n    computed: {\n      validate: (0, _index2.assertValueType)(\"boolean\"),\n      default: false\n    },\n    key: {\n      validate: function validate(node, key, val) {\n        var expectedTypes = node.computed ? [\"Expression\"] : [\"Identifier\", \"StringLiteral\", \"NumericLiteral\"];\n        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);\n      }\n    },\n    decorators: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Decorator\")))\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    },\n    generator: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    },\n    async: {\n      default: false,\n      validate: (0, _index2.assertValueType)(\"boolean\")\n    }\n  },\n  visitor: [\"key\", \"params\", \"body\", \"decorators\", \"returnType\", \"typeParameters\"],\n  aliases: [\"UserWhitespacable\", \"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\", \"ObjectMember\"]\n});\n\n(0, _index3.default)(\"ObjectProperty\", {\n  builder: [\"key\", \"value\", \"computed\", \"shorthand\", \"decorators\"],\n  fields: {\n    computed: {\n      validate: (0, _index2.assertValueType)(\"boolean\"),\n      default: false\n    },\n    key: {\n      validate: function validate(node, key, val) {\n        var expectedTypes = node.computed ? [\"Expression\"] : [\"Identifier\", \"StringLiteral\", \"NumericLiteral\"];\n        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);\n      }\n    },\n    value: {\n      validate: (0, _index2.assertNodeType)(\"Expression\", \"Pattern\", \"RestElement\")\n    },\n    shorthand: {\n      validate: (0, _index2.assertValueType)(\"boolean\"),\n      default: false\n    },\n    decorators: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Decorator\"))),\n      optional: true\n    }\n  },\n  visitor: [\"key\", \"value\", \"decorators\"],\n  aliases: [\"UserWhitespacable\", \"Property\", \"ObjectMember\"]\n});\n\n(0, _index3.default)(\"RestElement\", {\n  visitor: [\"argument\", \"typeAnnotation\"],\n  aliases: [\"LVal\"],\n  fields: {\n    argument: {\n      validate: (0, _index2.assertNodeType)(\"LVal\")\n    },\n    decorators: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Decorator\")))\n    }\n  }\n});\n\n(0, _index3.default)(\"ReturnStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: (0, _index2.assertNodeType)(\"Expression\"),\n      optional: true\n    }\n  }\n});\n\n(0, _index3.default)(\"SequenceExpression\", {\n  visitor: [\"expressions\"],\n  fields: {\n    expressions: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Expression\")))\n    }\n  },\n  aliases: [\"Expression\"]\n});\n\n(0, _index3.default)(\"SwitchCase\", {\n  visitor: [\"test\", \"consequent\"],\n  fields: {\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\"),\n      optional: true\n    },\n    consequent: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"Statement\")))\n    }\n  }\n});\n\n(0, _index3.default)(\"SwitchStatement\", {\n  visitor: [\"discriminant\", \"cases\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Scopable\"],\n  fields: {\n    discriminant: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    cases: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"SwitchCase\")))\n    }\n  }\n});\n\n(0, _index3.default)(\"ThisExpression\", {\n  aliases: [\"Expression\"]\n});\n\n(0, _index3.default)(\"ThrowStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  }\n});\n\n(0, _index3.default)(\"TryStatement\", {\n  visitor: [\"block\", \"handler\", \"finalizer\"],\n  aliases: [\"Statement\"],\n  fields: {\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    },\n    handler: {\n      optional: true,\n      handler: (0, _index2.assertNodeType)(\"BlockStatement\")\n    },\n    finalizer: {\n      optional: true,\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\")\n    }\n  }\n});\n\n(0, _index3.default)(\"UnaryExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: true\n    },\n    argument: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.UNARY_OPERATORS)\n    }\n  },\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\", \"Expression\"]\n});\n\n(0, _index3.default)(\"UpdateExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: false\n    },\n    argument: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    operator: {\n      validate: _index2.assertOneOf.apply(undefined, _constants.UPDATE_OPERATORS)\n    }\n  },\n  visitor: [\"argument\"],\n  aliases: [\"Expression\"]\n});\n\n(0, _index3.default)(\"VariableDeclaration\", {\n  builder: [\"kind\", \"declarations\"],\n  visitor: [\"declarations\"],\n  aliases: [\"Statement\", \"Declaration\"],\n  fields: {\n    kind: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"string\"), (0, _index2.assertOneOf)(\"var\", \"let\", \"const\"))\n    },\n    declarations: {\n      validate: (0, _index2.chain)((0, _index2.assertValueType)(\"array\"), (0, _index2.assertEach)((0, _index2.assertNodeType)(\"VariableDeclarator\")))\n    }\n  }\n});\n\n(0, _index3.default)(\"VariableDeclarator\", {\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: {\n      validate: (0, _index2.assertNodeType)(\"LVal\")\n    },\n    init: {\n      optional: true,\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    }\n  }\n});\n\n(0, _index3.default)(\"WhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n  fields: {\n    test: {\n      validate: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\", \"Statement\")\n    }\n  }\n});\n\n(0, _index3.default)(\"WithStatement\", {\n  visitor: [\"object\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    object: {\n      object: (0, _index2.assertNodeType)(\"Expression\")\n    },\n    body: {\n      validate: (0, _index2.assertNodeType)(\"BlockStatement\", \"Statement\")\n    }\n  }\n});"]},"metadata":{},"sourceType":"script"}