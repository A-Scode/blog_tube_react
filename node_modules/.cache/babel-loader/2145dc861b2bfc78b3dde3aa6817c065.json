{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.AwaitExpression = exports.FunctionTypeAnnotation = undefined;\nexports.NullableTypeAnnotation = NullableTypeAnnotation;\nexports.UpdateExpression = UpdateExpression;\nexports.ObjectExpression = ObjectExpression;\nexports.DoExpression = DoExpression;\nexports.Binary = Binary;\nexports.BinaryExpression = BinaryExpression;\nexports.SequenceExpression = SequenceExpression;\nexports.YieldExpression = YieldExpression;\nexports.ClassExpression = ClassExpression;\nexports.UnaryLike = UnaryLike;\nexports.FunctionExpression = FunctionExpression;\nexports.ArrowFunctionExpression = ArrowFunctionExpression;\nexports.ConditionalExpression = ConditionalExpression;\nexports.AssignmentExpression = AssignmentExpression;\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nvar PRECEDENCE = {\n  \"||\": 0,\n  \"&&\": 1,\n  \"|\": 2,\n  \"^\": 3,\n  \"&\": 4,\n  \"==\": 5,\n  \"===\": 5,\n  \"!=\": 5,\n  \"!==\": 5,\n  \"<\": 6,\n  \">\": 6,\n  \"<=\": 6,\n  \">=\": 6,\n  in: 6,\n  instanceof: 6,\n  \">>\": 7,\n  \"<<\": 7,\n  \">>>\": 7,\n  \"+\": 8,\n  \"-\": 8,\n  \"*\": 9,\n  \"/\": 9,\n  \"%\": 9,\n  \"**\": 10\n};\n\nfunction NullableTypeAnnotation(node, parent) {\n  return t.isArrayTypeAnnotation(parent);\n}\n\nexports.FunctionTypeAnnotation = NullableTypeAnnotation;\n\nfunction UpdateExpression(node, parent) {\n  return t.isMemberExpression(parent) && parent.object === node;\n}\n\nfunction ObjectExpression(node, parent, printStack) {\n  return isFirstInStatement(printStack, {\n    considerArrow: true\n  });\n}\n\nfunction DoExpression(node, parent, printStack) {\n  return isFirstInStatement(printStack);\n}\n\nfunction Binary(node, parent) {\n  if ((t.isCallExpression(parent) || t.isNewExpression(parent)) && parent.callee === node || t.isUnaryLike(parent) || t.isMemberExpression(parent) && parent.object === node || t.isAwaitExpression(parent)) {\n    return true;\n  }\n\n  if (t.isBinary(parent)) {\n    var parentOp = parent.operator;\n    var parentPos = PRECEDENCE[parentOp];\n    var nodeOp = node.operator;\n    var nodePos = PRECEDENCE[nodeOp];\n\n    if (parentPos === nodePos && parent.right === node && !t.isLogicalExpression(parent) || parentPos > nodePos) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction BinaryExpression(node, parent) {\n  return node.operator === \"in\" && (t.isVariableDeclarator(parent) || t.isFor(parent));\n}\n\nfunction SequenceExpression(node, parent) {\n  if (t.isForStatement(parent) || t.isThrowStatement(parent) || t.isReturnStatement(parent) || t.isIfStatement(parent) && parent.test === node || t.isWhileStatement(parent) && parent.test === node || t.isForInStatement(parent) && parent.right === node || t.isSwitchStatement(parent) && parent.discriminant === node || t.isExpressionStatement(parent) && parent.expression === node) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction YieldExpression(node, parent) {\n  return t.isBinary(parent) || t.isUnaryLike(parent) || t.isCallExpression(parent) || t.isMemberExpression(parent) || t.isNewExpression(parent) || t.isConditionalExpression(parent) && node === parent.test;\n}\n\nexports.AwaitExpression = YieldExpression;\n\nfunction ClassExpression(node, parent, printStack) {\n  return isFirstInStatement(printStack, {\n    considerDefaultExports: true\n  });\n}\n\nfunction UnaryLike(node, parent) {\n  return t.isMemberExpression(parent, {\n    object: node\n  }) || t.isCallExpression(parent, {\n    callee: node\n  }) || t.isNewExpression(parent, {\n    callee: node\n  });\n}\n\nfunction FunctionExpression(node, parent, printStack) {\n  return isFirstInStatement(printStack, {\n    considerDefaultExports: true\n  });\n}\n\nfunction ArrowFunctionExpression(node, parent) {\n  if (t.isExportDeclaration(parent) || t.isBinaryExpression(parent) || t.isLogicalExpression(parent) || t.isUnaryExpression(parent) || t.isTaggedTemplateExpression(parent)) {\n    return true;\n  }\n\n  return UnaryLike(node, parent);\n}\n\nfunction ConditionalExpression(node, parent) {\n  if (t.isUnaryLike(parent) || t.isBinary(parent) || t.isConditionalExpression(parent, {\n    test: node\n  }) || t.isAwaitExpression(parent)) {\n    return true;\n  }\n\n  return UnaryLike(node, parent);\n}\n\nfunction AssignmentExpression(node) {\n  if (t.isObjectPattern(node.left)) {\n    return true;\n  } else {\n    return ConditionalExpression.apply(undefined, arguments);\n  }\n}\n\nfunction isFirstInStatement(printStack) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$considerArrow = _ref.considerArrow,\n      considerArrow = _ref$considerArrow === undefined ? false : _ref$considerArrow,\n      _ref$considerDefaultE = _ref.considerDefaultExports,\n      considerDefaultExports = _ref$considerDefaultE === undefined ? false : _ref$considerDefaultE;\n\n  var i = printStack.length - 1;\n  var node = printStack[i];\n  i--;\n  var parent = printStack[i];\n\n  while (i > 0) {\n    if (t.isExpressionStatement(parent, {\n      expression: node\n    }) || t.isTaggedTemplateExpression(parent) || considerDefaultExports && t.isExportDefaultDeclaration(parent, {\n      declaration: node\n    }) || considerArrow && t.isArrowFunctionExpression(parent, {\n      body: node\n    })) {\n      return true;\n    }\n\n    if (t.isCallExpression(parent, {\n      callee: node\n    }) || t.isSequenceExpression(parent) && parent.expressions[0] === node || t.isMemberExpression(parent, {\n      object: node\n    }) || t.isConditional(parent, {\n      test: node\n    }) || t.isBinary(parent, {\n      left: node\n    }) || t.isAssignmentExpression(parent, {\n      left: node\n    })) {\n      node = parent;\n      i--;\n      parent = printStack[i];\n    } else {\n      return false;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["D:/Python files/Start Django/blog_tube/frontend/blog_tube/node_modules/babel-generator/lib/node/parentheses.js"],"names":["exports","__esModule","AwaitExpression","FunctionTypeAnnotation","undefined","NullableTypeAnnotation","UpdateExpression","ObjectExpression","DoExpression","Binary","BinaryExpression","SequenceExpression","YieldExpression","ClassExpression","UnaryLike","FunctionExpression","ArrowFunctionExpression","ConditionalExpression","AssignmentExpression","_babelTypes","require","t","_interopRequireWildcard","obj","newObj","key","Object","prototype","hasOwnProperty","call","default","PRECEDENCE","in","instanceof","node","parent","isArrayTypeAnnotation","isMemberExpression","object","printStack","isFirstInStatement","considerArrow","isCallExpression","isNewExpression","callee","isUnaryLike","isAwaitExpression","isBinary","parentOp","operator","parentPos","nodeOp","nodePos","right","isLogicalExpression","isVariableDeclarator","isFor","isForStatement","isThrowStatement","isReturnStatement","isIfStatement","test","isWhileStatement","isForInStatement","isSwitchStatement","discriminant","isExpressionStatement","expression","isConditionalExpression","considerDefaultExports","isExportDeclaration","isBinaryExpression","isUnaryExpression","isTaggedTemplateExpression","isObjectPattern","left","apply","arguments","_ref","length","_ref$considerArrow","_ref$considerDefaultE","i","isExportDefaultDeclaration","declaration","isArrowFunctionExpression","body","isSequenceExpression","expressions","isConditional","isAssignmentExpression"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.AwaitExpression = exports.FunctionTypeAnnotation = undefined;\nexports.NullableTypeAnnotation = NullableTypeAnnotation;\nexports.UpdateExpression = UpdateExpression;\nexports.ObjectExpression = ObjectExpression;\nexports.DoExpression = DoExpression;\nexports.Binary = Binary;\nexports.BinaryExpression = BinaryExpression;\nexports.SequenceExpression = SequenceExpression;\nexports.YieldExpression = YieldExpression;\nexports.ClassExpression = ClassExpression;\nexports.UnaryLike = UnaryLike;\nexports.FunctionExpression = FunctionExpression;\nexports.ArrowFunctionExpression = ArrowFunctionExpression;\nexports.ConditionalExpression = ConditionalExpression;\nexports.AssignmentExpression = AssignmentExpression;\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar PRECEDENCE = {\n  \"||\": 0,\n  \"&&\": 1,\n  \"|\": 2,\n  \"^\": 3,\n  \"&\": 4,\n  \"==\": 5,\n  \"===\": 5,\n  \"!=\": 5,\n  \"!==\": 5,\n  \"<\": 6,\n  \">\": 6,\n  \"<=\": 6,\n  \">=\": 6,\n  in: 6,\n  instanceof: 6,\n  \">>\": 7,\n  \"<<\": 7,\n  \">>>\": 7,\n  \"+\": 8,\n  \"-\": 8,\n  \"*\": 9,\n  \"/\": 9,\n  \"%\": 9,\n  \"**\": 10\n};\n\nfunction NullableTypeAnnotation(node, parent) {\n  return t.isArrayTypeAnnotation(parent);\n}\n\nexports.FunctionTypeAnnotation = NullableTypeAnnotation;\nfunction UpdateExpression(node, parent) {\n  return t.isMemberExpression(parent) && parent.object === node;\n}\n\nfunction ObjectExpression(node, parent, printStack) {\n  return isFirstInStatement(printStack, { considerArrow: true });\n}\n\nfunction DoExpression(node, parent, printStack) {\n  return isFirstInStatement(printStack);\n}\n\nfunction Binary(node, parent) {\n  if ((t.isCallExpression(parent) || t.isNewExpression(parent)) && parent.callee === node || t.isUnaryLike(parent) || t.isMemberExpression(parent) && parent.object === node || t.isAwaitExpression(parent)) {\n    return true;\n  }\n\n  if (t.isBinary(parent)) {\n    var parentOp = parent.operator;\n    var parentPos = PRECEDENCE[parentOp];\n\n    var nodeOp = node.operator;\n    var nodePos = PRECEDENCE[nodeOp];\n\n    if (parentPos === nodePos && parent.right === node && !t.isLogicalExpression(parent) || parentPos > nodePos) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction BinaryExpression(node, parent) {\n  return node.operator === \"in\" && (t.isVariableDeclarator(parent) || t.isFor(parent));\n}\n\nfunction SequenceExpression(node, parent) {\n\n  if (t.isForStatement(parent) || t.isThrowStatement(parent) || t.isReturnStatement(parent) || t.isIfStatement(parent) && parent.test === node || t.isWhileStatement(parent) && parent.test === node || t.isForInStatement(parent) && parent.right === node || t.isSwitchStatement(parent) && parent.discriminant === node || t.isExpressionStatement(parent) && parent.expression === node) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction YieldExpression(node, parent) {\n  return t.isBinary(parent) || t.isUnaryLike(parent) || t.isCallExpression(parent) || t.isMemberExpression(parent) || t.isNewExpression(parent) || t.isConditionalExpression(parent) && node === parent.test;\n}\n\nexports.AwaitExpression = YieldExpression;\nfunction ClassExpression(node, parent, printStack) {\n  return isFirstInStatement(printStack, { considerDefaultExports: true });\n}\n\nfunction UnaryLike(node, parent) {\n  return t.isMemberExpression(parent, { object: node }) || t.isCallExpression(parent, { callee: node }) || t.isNewExpression(parent, { callee: node });\n}\n\nfunction FunctionExpression(node, parent, printStack) {\n  return isFirstInStatement(printStack, { considerDefaultExports: true });\n}\n\nfunction ArrowFunctionExpression(node, parent) {\n  if (t.isExportDeclaration(parent) || t.isBinaryExpression(parent) || t.isLogicalExpression(parent) || t.isUnaryExpression(parent) || t.isTaggedTemplateExpression(parent)) {\n    return true;\n  }\n\n  return UnaryLike(node, parent);\n}\n\nfunction ConditionalExpression(node, parent) {\n  if (t.isUnaryLike(parent) || t.isBinary(parent) || t.isConditionalExpression(parent, { test: node }) || t.isAwaitExpression(parent)) {\n    return true;\n  }\n\n  return UnaryLike(node, parent);\n}\n\nfunction AssignmentExpression(node) {\n  if (t.isObjectPattern(node.left)) {\n    return true;\n  } else {\n    return ConditionalExpression.apply(undefined, arguments);\n  }\n}\n\nfunction isFirstInStatement(printStack) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$considerArrow = _ref.considerArrow,\n      considerArrow = _ref$considerArrow === undefined ? false : _ref$considerArrow,\n      _ref$considerDefaultE = _ref.considerDefaultExports,\n      considerDefaultExports = _ref$considerDefaultE === undefined ? false : _ref$considerDefaultE;\n\n  var i = printStack.length - 1;\n  var node = printStack[i];\n  i--;\n  var parent = printStack[i];\n  while (i > 0) {\n    if (t.isExpressionStatement(parent, { expression: node }) || t.isTaggedTemplateExpression(parent) || considerDefaultExports && t.isExportDefaultDeclaration(parent, { declaration: node }) || considerArrow && t.isArrowFunctionExpression(parent, { body: node })) {\n      return true;\n    }\n\n    if (t.isCallExpression(parent, { callee: node }) || t.isSequenceExpression(parent) && parent.expressions[0] === node || t.isMemberExpression(parent, { object: node }) || t.isConditional(parent, { test: node }) || t.isBinary(parent, { left: node }) || t.isAssignmentExpression(parent, { left: node })) {\n      node = parent;\n      i--;\n      parent = printStack[i];\n    } else {\n      return false;\n    }\n  }\n\n  return false;\n}"]},"metadata":{},"sourceType":"script"}