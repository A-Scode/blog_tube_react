{"ast":null,"code":"\"use strict\";\n\nmodule.exports = {\n  filename: {\n    type: \"filename\",\n    description: \"filename to use when reading from stdin - this will be used in source-maps, errors etc\",\n    default: \"unknown\",\n    shorthand: \"f\"\n  },\n  filenameRelative: {\n    hidden: true,\n    type: \"string\"\n  },\n  inputSourceMap: {\n    hidden: true\n  },\n  env: {\n    hidden: true,\n    default: {}\n  },\n  mode: {\n    description: \"\",\n    hidden: true\n  },\n  retainLines: {\n    type: \"boolean\",\n    default: false,\n    description: \"retain line numbers - will result in really ugly code\"\n  },\n  highlightCode: {\n    description: \"enable/disable ANSI syntax highlighting of code frames (on by default)\",\n    type: \"boolean\",\n    default: true\n  },\n  suppressDeprecationMessages: {\n    type: \"boolean\",\n    default: false,\n    hidden: true\n  },\n  presets: {\n    type: \"list\",\n    description: \"\",\n    default: []\n  },\n  plugins: {\n    type: \"list\",\n    default: [],\n    description: \"\"\n  },\n  ignore: {\n    type: \"list\",\n    description: \"list of glob paths to **not** compile\",\n    default: []\n  },\n  only: {\n    type: \"list\",\n    description: \"list of glob paths to **only** compile\"\n  },\n  code: {\n    hidden: true,\n    default: true,\n    type: \"boolean\"\n  },\n  metadata: {\n    hidden: true,\n    default: true,\n    type: \"boolean\"\n  },\n  ast: {\n    hidden: true,\n    default: true,\n    type: \"boolean\"\n  },\n  extends: {\n    type: \"string\",\n    hidden: true\n  },\n  comments: {\n    type: \"boolean\",\n    default: true,\n    description: \"write comments to generated output (true by default)\"\n  },\n  shouldPrintComment: {\n    hidden: true,\n    description: \"optional callback to control whether a comment should be inserted, when this is used the comments option is ignored\"\n  },\n  wrapPluginVisitorMethod: {\n    hidden: true,\n    description: \"optional callback to wrap all visitor methods\"\n  },\n  compact: {\n    type: \"booleanString\",\n    default: \"auto\",\n    description: \"do not include superfluous whitespace characters and line terminators [true|false|auto]\"\n  },\n  minified: {\n    type: \"boolean\",\n    default: false,\n    description: \"save as much bytes when printing [true|false]\"\n  },\n  sourceMap: {\n    alias: \"sourceMaps\",\n    hidden: true\n  },\n  sourceMaps: {\n    type: \"booleanString\",\n    description: \"[true|false|inline]\",\n    default: false,\n    shorthand: \"s\"\n  },\n  sourceMapTarget: {\n    type: \"string\",\n    description: \"set `file` on returned source map\"\n  },\n  sourceFileName: {\n    type: \"string\",\n    description: \"set `sources[0]` on returned source map\"\n  },\n  sourceRoot: {\n    type: \"filename\",\n    description: \"the root from which all sources are relative\"\n  },\n  babelrc: {\n    description: \"Whether or not to look up .babelrc and .babelignore files\",\n    type: \"boolean\",\n    default: true\n  },\n  sourceType: {\n    description: \"\",\n    default: \"module\"\n  },\n  auxiliaryCommentBefore: {\n    type: \"string\",\n    description: \"print a comment before any injected non-user code\"\n  },\n  auxiliaryCommentAfter: {\n    type: \"string\",\n    description: \"print a comment after any injected non-user code\"\n  },\n  resolveModuleSource: {\n    hidden: true\n  },\n  getModuleId: {\n    hidden: true\n  },\n  moduleRoot: {\n    type: \"filename\",\n    description: \"optional prefix for the AMD module formatter that will be prepend to the filename on module definitions\"\n  },\n  moduleIds: {\n    type: \"boolean\",\n    default: false,\n    shorthand: \"M\",\n    description: \"insert an explicit id for modules\"\n  },\n  moduleId: {\n    description: \"specify a custom name for module ids\",\n    type: \"string\"\n  },\n  passPerPreset: {\n    description: \"Whether to spawn a traversal pass per a preset. By default all presets are merged.\",\n    type: \"boolean\",\n    default: false,\n    hidden: true\n  },\n  parserOpts: {\n    description: \"Options to pass into the parser, or to change parsers (parserOpts.parser)\",\n    default: false\n  },\n  generatorOpts: {\n    description: \"Options to pass into the generator, or to change generators (generatorOpts.generator)\",\n    default: false\n  }\n};","map":{"version":3,"sources":["D:/Python files/Start Django/blog_tube/frontend/blog_tube/node_modules/babel-core/lib/transformation/file/options/config.js"],"names":["module","exports","filename","type","description","default","shorthand","filenameRelative","hidden","inputSourceMap","env","mode","retainLines","highlightCode","suppressDeprecationMessages","presets","plugins","ignore","only","code","metadata","ast","extends","comments","shouldPrintComment","wrapPluginVisitorMethod","compact","minified","sourceMap","alias","sourceMaps","sourceMapTarget","sourceFileName","sourceRoot","babelrc","sourceType","auxiliaryCommentBefore","auxiliaryCommentAfter","resolveModuleSource","getModuleId","moduleRoot","moduleIds","moduleId","passPerPreset","parserOpts","generatorOpts"],"mappings":"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","sourcesContent":["\"use strict\";\n\nmodule.exports = {\n  filename: {\n    type: \"filename\",\n    description: \"filename to use when reading from stdin - this will be used in source-maps, errors etc\",\n    default: \"unknown\",\n    shorthand: \"f\"\n  },\n\n  filenameRelative: {\n    hidden: true,\n    type: \"string\"\n  },\n\n  inputSourceMap: {\n    hidden: true\n  },\n\n  env: {\n    hidden: true,\n    default: {}\n  },\n\n  mode: {\n    description: \"\",\n    hidden: true\n  },\n\n  retainLines: {\n    type: \"boolean\",\n    default: false,\n    description: \"retain line numbers - will result in really ugly code\"\n  },\n\n  highlightCode: {\n    description: \"enable/disable ANSI syntax highlighting of code frames (on by default)\",\n    type: \"boolean\",\n    default: true\n  },\n\n  suppressDeprecationMessages: {\n    type: \"boolean\",\n    default: false,\n    hidden: true\n  },\n\n  presets: {\n    type: \"list\",\n    description: \"\",\n    default: []\n  },\n\n  plugins: {\n    type: \"list\",\n    default: [],\n    description: \"\"\n  },\n\n  ignore: {\n    type: \"list\",\n    description: \"list of glob paths to **not** compile\",\n    default: []\n  },\n\n  only: {\n    type: \"list\",\n    description: \"list of glob paths to **only** compile\"\n  },\n\n  code: {\n    hidden: true,\n    default: true,\n    type: \"boolean\"\n  },\n\n  metadata: {\n    hidden: true,\n    default: true,\n    type: \"boolean\"\n  },\n\n  ast: {\n    hidden: true,\n    default: true,\n    type: \"boolean\"\n  },\n\n  extends: {\n    type: \"string\",\n    hidden: true\n  },\n\n  comments: {\n    type: \"boolean\",\n    default: true,\n    description: \"write comments to generated output (true by default)\"\n  },\n\n  shouldPrintComment: {\n    hidden: true,\n    description: \"optional callback to control whether a comment should be inserted, when this is used the comments option is ignored\"\n  },\n\n  wrapPluginVisitorMethod: {\n    hidden: true,\n    description: \"optional callback to wrap all visitor methods\"\n  },\n\n  compact: {\n    type: \"booleanString\",\n    default: \"auto\",\n    description: \"do not include superfluous whitespace characters and line terminators [true|false|auto]\"\n  },\n\n  minified: {\n    type: \"boolean\",\n    default: false,\n    description: \"save as much bytes when printing [true|false]\"\n  },\n\n  sourceMap: {\n    alias: \"sourceMaps\",\n    hidden: true\n  },\n\n  sourceMaps: {\n    type: \"booleanString\",\n    description: \"[true|false|inline]\",\n    default: false,\n    shorthand: \"s\"\n  },\n\n  sourceMapTarget: {\n    type: \"string\",\n    description: \"set `file` on returned source map\"\n  },\n\n  sourceFileName: {\n    type: \"string\",\n    description: \"set `sources[0]` on returned source map\"\n  },\n\n  sourceRoot: {\n    type: \"filename\",\n    description: \"the root from which all sources are relative\"\n  },\n\n  babelrc: {\n    description: \"Whether or not to look up .babelrc and .babelignore files\",\n    type: \"boolean\",\n    default: true\n  },\n\n  sourceType: {\n    description: \"\",\n    default: \"module\"\n  },\n\n  auxiliaryCommentBefore: {\n    type: \"string\",\n    description: \"print a comment before any injected non-user code\"\n  },\n\n  auxiliaryCommentAfter: {\n    type: \"string\",\n    description: \"print a comment after any injected non-user code\"\n  },\n\n  resolveModuleSource: {\n    hidden: true\n  },\n\n  getModuleId: {\n    hidden: true\n  },\n\n  moduleRoot: {\n    type: \"filename\",\n    description: \"optional prefix for the AMD module formatter that will be prepend to the filename on module definitions\"\n  },\n\n  moduleIds: {\n    type: \"boolean\",\n    default: false,\n    shorthand: \"M\",\n    description: \"insert an explicit id for modules\"\n  },\n\n  moduleId: {\n    description: \"specify a custom name for module ids\",\n    type: \"string\"\n  },\n\n  passPerPreset: {\n    description: \"Whether to spawn a traversal pass per a preset. By default all presets are merged.\",\n    type: \"boolean\",\n    default: false,\n    hidden: true\n  },\n\n  parserOpts: {\n    description: \"Options to pass into the parser, or to change parsers (parserOpts.parser)\",\n    default: false\n  },\n\n  generatorOpts: {\n    description: \"Options to pass into the generator, or to change generators (generatorOpts.generator)\",\n    default: false\n  }\n};"]},"metadata":{},"sourceType":"script"}