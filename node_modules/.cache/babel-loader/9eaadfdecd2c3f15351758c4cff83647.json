{"ast":null,"code":"var _jsxFileName = \"A:\\\\Python files\\\\Start Django\\\\blog_tube\\\\frontend\\\\blog_tube\\\\src\\\\componenets\\\\appBlogians.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport './statics/css/appBlogians.css';\nimport appConfig from './statics/appConfig.json';\nimport { useEffect, useState, useRef, useContext } from 'react';\nimport blogiansIcon from \"./statics/images/blogians.svg\";\nimport PropTypes from 'prop-types';\nimport { Login_context } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar AppBlogians = props => {\n  _s();\n\n  const [user_list, set_user_list] = useState([]);\n  var ref_list = useRef([]);\n  useEffect(() => {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', appConfig.origin + \"backend_api/userlist\");\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState == 4 && xhr.status == 200) {\n        let response = JSON.parse(xhr.response);\n\n        if (response.status == 'success') {\n          ref_list.current['list'] = response.userslist;\n          set_user_list(response.userslist);\n        } else if (response.status == 'fail') {\n          set_user_list([]);\n        }\n      }\n    };\n\n    xhr.send();\n  }, []);\n\n  function search(event) {\n    const target = event.target;\n    let data = event.nativeEvent.data;\n\n    if (\"?\\\"':;!*()\".search(data) != -1) {\n      target.setCustomValidity(\"username does not contain ?!:;#$%^&*\\\"'() \");\n      target.value = target.value.slice(0, target.value.length - 1);\n      target.reportValidity();\n    } else {\n      target.setCustomValidity(\"\");\n      target.reportValidity();\n      let filtered_list = [];\n\n      for (var user of ref_list.current['list']) {\n        if (user.user_name.search(target.value) != -1) {\n          filtered_list.push(user);\n        }\n\n        filtered_list.sort((a, b) => b.followers_count - a.followers_count);\n        set_user_list(filtered_list);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blogians\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"blogiansInput\",\n      onInput: event => search(event),\n      style: {\n        backgroundImage: `url(${blogiansIcon})`\n      },\n      type: \"text\",\n      placeholder: \"Search Blogians\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"allBlogians\",\n      children: user_list.map(item => {\n        return /*#__PURE__*/_jsxDEV(BlogiansMiniProfile, {\n          user_details: item\n        }, item.user_id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 32\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 13\n  }, this);\n};\n\n_s(AppBlogians, \"oAfexhfpS+Ea1SLJBRwLgLCyI+g=\");\n\n_c = AppBlogians;\n\nfunction BlogiansMiniProfile(props) {\n  _s2();\n\n  let ref = useRef({});\n  const session = useContext(Login_context);\n  let xhr = new XMLHttpRequest();\n  xhr.open('POST', appConfig.origin + \"backend_api/getprofilephoto\");\n  xhr.responseType = 'blob';\n\n  xhr.onreadystatechange = () => {\n    if (xhr.readyState == 4 && xhr.status == 200) {}\n  };\n\n  xhr.setRequestHeader(\"session\", session);\n  xhr.setRequestHeader(\"photouid\", JSON.stringify(props.user_details.user_id));\n  xhr.send();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"miniprofile\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profilePhoto\",\n      ref: el => ref.current['profile_photo'] = el\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile_name\",\n      children: props.user_details.user_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"follower_count\",\n      style: {\n        backgroundImage: `url(${blogiansIcon})`\n      },\n      children: [props.user_details.followers_count > 0 ? props.user_details.followers_count : \"No\", \" Followers\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), props.user_details.total_blogs > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tag\",\n      children: \"\\uD83C\\uDFF9Blogger\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 50\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(BlogiansMiniProfile, \"gXPm2FcztLxZgxM8cJL181fSltg=\");\n\n_c2 = BlogiansMiniProfile;\nBlogiansMiniProfile.propTypes = {\n  user_details: PropTypes.object.isRequired\n};\nexport default AppBlogians;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppBlogians\");\n$RefreshReg$(_c2, \"BlogiansMiniProfile\");","map":{"version":3,"sources":["A:/Python files/Start Django/blog_tube/frontend/blog_tube/src/componenets/appBlogians.js"],"names":["appConfig","useEffect","useState","useRef","useContext","PropTypes","Login_context","AppBlogians","props","user_list","set_user_list","ref_list","xhr","XMLHttpRequest","open","origin","onreadystatechange","readyState","status","response","JSON","parse","current","userslist","send","search","event","target","data","nativeEvent","setCustomValidity","value","slice","length","reportValidity","filtered_list","user","user_name","push","sort","a","b","followers_count","backgroundImage","blogiansIcon","map","item","user_id","BlogiansMiniProfile","ref","session","responseType","setRequestHeader","stringify","user_details","el","total_blogs","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import './statics/css/appBlogians.css'\r\nimport appConfig from './statics/appConfig.json'\r\nimport {useEffect, useState ,useRef , useContext} from 'react'\r\nimport blogiansIcon from './statics/images/blogians.svg'\r\nimport PropTypes from 'prop-types'\r\nimport {Login_context} from '../App'\r\n\r\n\r\nvar AppBlogians = props=>{\r\n    const [user_list , set_user_list] = useState([])\r\n\r\n    var ref_list = useRef([]) ;\r\n\r\n    useEffect(()=>{\r\n    var xhr = new XMLHttpRequest()\r\n    xhr.open('GET' , appConfig.origin + \"backend_api/userlist\")\r\n    xhr.onreadystatechange = ()=>{\r\n        if (xhr.readyState == 4 && xhr.status == 200){\r\n            let response = JSON.parse(xhr.response)\r\n\r\n            if (response.status == 'success'){\r\n                ref_list.current['list'] = response.userslist\r\n                set_user_list(response.userslist)\r\n            }else if (response.status == 'fail'){\r\n                set_user_list([])\r\n            }\r\n\r\n        }\r\n    }\r\n    xhr.send()\r\n},[])\r\n\r\n    function search(event){\r\n        const target = event.target\r\n        let data = event.nativeEvent.data\r\n\r\n        if ( \"?\\\"':;!*()\".search(data) != -1){\r\n            target.setCustomValidity(\"username does not contain ?!:;#$%^&*\\\"'() \")\r\n            target.value = target.value.slice(0 , target.value.length -1)\r\n            target.reportValidity()\r\n        }else{\r\n            target.setCustomValidity(\"\")\r\n            target.reportValidity()\r\n            \r\n            let filtered_list = []\r\n            \r\n            for (var user of ref_list.current['list']){\r\n                if(user.user_name.search(target.value) != -1){\r\n                    filtered_list.push(user)\r\n                }\r\n            filtered_list.sort((a,b)=>b.followers_count - a.followers_count)\r\n            set_user_list(filtered_list)\r\n            \r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    return (<div className=\"blogians\" >\r\n                <input className = \"blogiansInput\" onInput= {event=>search(event)} style= {{backgroundImage:`url(${blogiansIcon})`}} type = \"text\" placeholder = \"Search Blogians\" />\r\n                <div className=\"allBlogians\">\r\n                    {user_list.map(item=>{\r\n                        return(<BlogiansMiniProfile key = {item.user_id} user_details = {item} />)\r\n                    })}\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\n\r\nfunction BlogiansMiniProfile(props){\r\n    let ref = useRef({})\r\n    const session = useContext(Login_context)\r\n    let xhr = new XMLHttpRequest()\r\n    xhr.open('POST', appConfig.origin + \"backend_api/getprofilephoto\")\r\n    xhr.responseType = 'blob'\r\n    xhr.onreadystatechange = ()=>{\r\n        if (xhr.readyState == 4 && xhr.status == 200){\r\n            \r\n        }\r\n    }\r\n    xhr.setRequestHeader(\"session\" , session)\r\n    xhr.setRequestHeader(\"photouid\" ,JSON.stringify( props.user_details.user_id))\r\n    xhr.send()\r\n    return(\r\n        <div className=\"miniprofile\" >\r\n            <div className=\"profilePhoto\" ref = {el=>ref.current['profile_photo']=el}>\r\n            </div>\r\n            <div className=\"profile_name\">{props.user_details.user_name}</div>\r\n            <div className=\"follower_count\" style= {{backgroundImage : `url(${blogiansIcon})`}} >{props.user_details.followers_count > 0 ?props.user_details.followers_count:\"No\"} Followers</div>\r\n            {props.user_details.total_blogs > 0 ?<div className=\"tag\">🏹Blogger</div>:null}\r\n        </div>\r\n    )\r\n}\r\n\r\nBlogiansMiniProfile.propTypes = {\r\n    user_details : PropTypes.object.isRequired\r\n}\r\n\r\n\r\n\r\nexport  default AppBlogians;\r\n"]},"metadata":{},"sourceType":"module"}